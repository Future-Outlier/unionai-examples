name: Test Examples

on:
  # Uncomment to enable automatic testing on push to main
  # push:
  #   branches: [ main ]
  # Uncomment to enable automatic testing on pull requests
  # pull_request:
  #  branches: [ main ]
  # Uncomment to enable daily scheduled testing
  # schedule:
  #   # Run daily at 2 AM UTC
  #   - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode to run'
        required: true
        default: 'test'
        type: choice
        options:
          - test-preview
          - test-local
          - test
      filter:
        description: 'Filter pattern for examples to test (optional, mutually exclusive with file)'
        required: false
        type: string
      file:
        description: 'File path for example to test (optional, mutually exclusive with filter)'
        required: false
        type: string
      python_version:
        description: 'Python version to use'
        required: false
        default: '3.13'
        type: choice
        options:
          - '3.12'
          - '3.13'

jobs:
  test-examples:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.13']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Create virtual environment and update Flyte
      run: |
        uv venv --python ${{ matrix.python-version }} .venv
        source .venv/bin/activate
        echo "Virtual environment created with Python ${{ matrix.python-version }}"

    - name: Update to latest Flyte version
      run: |
        source .venv/bin/activate
        make update-flyte

    - name: Clean previous test artifacts
      run: |
        source .venv/bin/activate
        make clean

    - name: Run tests
      env:
        GITHUB_ACTIONS: true
        # Flyte client secret for authentication (referenced in config template)
        FLYTE_CLIENT_SECRET: ${{ secrets.FLYTE_CLIENT_SECRET }}
      run: |
        source .venv/bin/activate
        # Build the make command with optional parameters
        MAKE_CMD="make ${{ github.event.inputs.test_mode || 'test-preview' }}"

        # Add FILE parameter if specified (takes precedence over FILTER)
        if [ -n "${{ github.event.inputs.file }}" ]; then
          MAKE_CMD="$MAKE_CMD FILE=\"${{ github.event.inputs.file }}\""
        elif [ -n "${{ github.event.inputs.filter }}" ]; then
          MAKE_CMD="$MAKE_CMD FILTER=\"${{ github.event.inputs.filter }}\""
        fi

        echo "🚀 Executing: $MAKE_CMD"
        eval $MAKE_CMD

    - name: Debug test output files
      if: always()
      run: |
        echo "📁 Files in test/ directory:"
        find test/ -type f || echo "No test directory found"
        echo "📁 Files in test/reports/ directory structure:"
        find test/reports/ -type f || echo "No test/reports directory found"
        echo "📁 Current directory contents:"
        ls -la

    - name: Upload test reports and logs
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('test/reports/**') != ''
      with:
        name: test-reports-py${{ matrix.python-version }}
        path: |
          test/reports/
        retention-days: 30

  # Job to combine and publish results from all matrix runs
  publish-results:
    needs: test-examples
    runs-on: ubuntu-latest
    # Only run for manual workflow dispatches, not for PR dry-runs
    if: always() && github.event_name == 'workflow_dispatch' && needs.test-examples.result != 'cancelled'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all test artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Debug artifacts
      run: |
        echo "📁 Downloaded artifacts structure:"
        find artifacts/ -type f || echo "No artifacts directory found"
        ls -la artifacts/ || echo "Cannot list artifacts directory"

    - name: Combine test results
      run: |
        mkdir -p combined-results/reports
        echo "📊 Combining test results from all Python versions..."

        # Copy entire reports directory structure from test-reports artifacts
        find artifacts/ -path "*/test-reports-*" -type d -name "reports" -exec cp -r {}/* combined-results/reports/ \; || echo "No reports found"

        echo "📁 Combined results structure:"
        find combined-results/ -type f | head -20

    - name: Create test summary
      run: |
        echo "# 🧪 Test Summary" > combined-results/SUMMARY.md
        echo "" >> combined-results/SUMMARY.md
        echo "## Test Results by Python Version" >> combined-results/SUMMARY.md
        echo "" >> combined-results/SUMMARY.md

        # Analyze JSON reports from the reports directory
        for report in combined-results/reports/test_report.json; do
          if [ -f "$report" ]; then
            echo "- **Report**: $(basename $report)" >> combined-results/SUMMARY.md
            if command -v jq >/dev/null 2>&1; then
              passed_count=$(jq -r '[.[] | select(.status=="passed")] | length' "$report" 2>/dev/null || echo "0")
              failed_count=$(jq -r '[.[] | select(.status=="failed")] | length' "$report" 2>/dev/null || echo "0")
              timeout_count=$(jq -r '[.[] | select(.status=="timeout")] | length' "$report" 2>/dev/null || echo "0")
              total_count=$(jq -r 'length' "$report" 2>/dev/null || echo "0")
              echo "  - **Status**: $passed_count passed, $failed_count failed, $timeout_count timeout" >> combined-results/SUMMARY.md
              echo "  - **Total**: $total_count tests" >> combined-results/SUMMARY.md
            else
              echo "  - **Status**: JSON analysis requires jq (not available)" >> combined-results/SUMMARY.md
            fi
            echo "" >> combined-results/SUMMARY.md
          fi
        done

        # Count log files and reports
        log_count=$(find combined-results/reports/logs/ -name "*.log" 2>/dev/null | wc -l)
        report_count=$(find combined-results/reports/ -name "*.json" -o -name "*.html" | wc -l)

        echo "## 📋 Artifacts Generated" >> combined-results/SUMMARY.md
        echo "" >> combined-results/SUMMARY.md
        echo "- **Log files**: $log_count individual test logs" >> combined-results/SUMMARY.md
        echo "- **Report files**: $report_count JSON/HTML reports" >> combined-results/SUMMARY.md
        echo "- **Structure**:" >> combined-results/SUMMARY.md
        echo "  - \`reports/\` - Test reports and logs directory" >> combined-results/SUMMARY.md
        echo "  - \`reports/logs/\` - Individual test execution logs" >> combined-results/SUMMARY.md

    - name: Upload combined results
      uses: actions/upload-artifact@v4
      with:
        name: combined-test-results
        path: combined-results/
        retention-days: 90

  # Job to deploy results to GitHub Pages
  deploy-pages:
    needs: publish-results
    runs-on: ubuntu-latest
    # Deploy for manual workflow dispatches that completed (success or failure)
    if: always() && github.event_name == 'workflow_dispatch' && needs.publish-results.result != 'cancelled'

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Download combined results
      uses: actions/download-artifact@v4
      with:
        name: combined-test-results
        path: pages-content/

    - name: Create GitHub Pages content
      run: |
        cd pages-content

        # Create an index.html that provides navigation
        cat > index.html << 'EOF'
        <!DOCTYPE html>
        <html>
        <head>
            <title>Flyte Examples Test Results</title>
            <style>
                body {
                    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
                    margin: 20px;
                    background-color: #f8f9fa;
                }
                .container {
                    max-width: 800px;
                    margin: 0 auto;
                    background: white;
                    padding: 20px;
                    border-radius: 8px;
                    box-shadow: 0 2px 4px rgba(0,0,0,0.1);
                }
                .header {
                    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    color: white;
                    padding: 20px;
                    border-radius: 8px;
                    margin-bottom: 20px;
                }
                .nav-section {
                    margin: 20px 0;
                    padding: 15px;
                    background: #f8f9fa;
                    border-radius: 5px;
                }
                .nav-section h3 {
                    margin-top: 0;
                    color: #495057;
                }
                .file-list {
                    margin: 10px 0;
                }
                .file-link {
                    display: inline-block;
                    margin: 5px 10px 5px 0;
                    padding: 8px 12px;
                    background: #007bff;
                    color: white;
                    text-decoration: none;
                    border-radius: 4px;
                    font-size: 14px;
                }
                .file-link:hover {
                    background: #0056b3;
                }
                .timestamp {
                    color: #6c757d;
                    font-size: 14px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <div class="header">
                    <h1>🧪 Flyte Examples Test Results</h1>
                    <p class="timestamp">Generated: $(date -u)</p>
                    <p>Workflow Run: <a href="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" style="color: #ffc107;">View on GitHub Actions</a></p>
                </div>

                <div class="nav-section">
                    <h3>📊 Test Reports</h3>
                    <p>Formatted test results with summaries and statistics:</p>
                    <div class="file-list">
        EOF

        # Add links to HTML reports
        find reports/ -name "*.html" | while read file; do
            filename=$(basename "$file")
            echo "                        <a href=\"$file\" class=\"file-link\">📈 $filename</a>" >> index.html
        done

        cat >> index.html << 'EOF'
                    </div>
                </div>

                <div class="nav-section">
                    <h3>📋 Raw Data</h3>
                    <p>JSON data for programmatic analysis:</p>
                    <div class="file-list">
        EOF

        # Add links to JSON reports
        find reports/ -name "*.json" | while read file; do
            filename=$(basename "$file")
            echo "                        <a href=\"$file\" class=\"file-link\">📄 $filename</a>" >> index.html
        done

        cat >> index.html << 'EOF'
                    </div>
                </div>

                <div class="nav-section">
                    <h3>📁 Test Logs</h3>
                    <p>Individual test execution logs are available via the "View Log" links in the test reports above.</p>
                    <p>Log files are organized by test script and contain detailed execution output.</p>
                </div>

                <div class="nav-section">
                    <h3>📄 Summary</h3>
                    <p><a href="SUMMARY.md" class="file-link">📊 View Test Summary</a></p>
                </div>
            </div>
        </body>
        </html>
        EOF

        echo "📄 Created GitHub Pages index with navigation"
        ls -la

    - name: Setup Pages
      uses: actions/configure-pages@v4
      with:
        enablement: true

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: pages-content/

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Comment deployment URL
      run: |
        echo "🚀 Test results deployed to GitHub Pages!"
        echo "📊 View results at: ${{ steps.deployment.outputs.page_url }}"