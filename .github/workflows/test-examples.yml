name: Test Examples

on:
  # Uncomment to enable automatic testing on push to main
  # push:
  #   branches: [ main ]
  # Uncomment to enable automatic testing on pull requests
  # pull_request:
  #  branches: [ main ]
  # Uncomment to enable daily scheduled testing
  # schedule:
  #   # Run daily at 2 AM UTC
  #   - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode to run'
        required: true
        default: 'test'
        type: choice
        options:
          - test-preview
          - test-local
          - test
      filter:
        description: 'Filter pattern for examples to test (optional, mutually exclusive with file)'
        required: false
        type: string
      file:
        description: 'File path for example to test (optional, mutually exclusive with filter)'
        required: false
        type: string
      python_version:
        description: 'Python version to use'
        required: false
        default: '3.13'
        type: choice
        options:
          - '3.12'
          - '3.13'

jobs:
  test-examples:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.13']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Create virtual environment and update Flyte
      run: |
        uv venv --python ${{ matrix.python-version }} .venv
        source .venv/bin/activate
        echo "Virtual environment created with Python ${{ matrix.python-version }}"

    - name: Update to latest Flyte version
      run: |
        source .venv/bin/activate
        make update-flyte

    - name: Clean previous test artifacts
      run: |
        source .venv/bin/activate
        make clean

    - name: Run tests
      env:
        GITHUB_ACTIONS: true
        # Flyte client secret for authentication (referenced in config template)
        FLYTE_CLIENT_SECRET: ${{ secrets.FLYTE_CLIENT_SECRET }}
      run: |
        source .venv/bin/activate
        # Build the make command with optional parameters
        MAKE_CMD="make ${{ github.event.inputs.test_mode || 'test-preview' }}"

        # Add FILE parameter if specified (takes precedence over FILTER)
        if [ -n "${{ github.event.inputs.file }}" ]; then
          MAKE_CMD="$MAKE_CMD FILE=\"${{ github.event.inputs.file }}\""
        elif [ -n "${{ github.event.inputs.filter }}" ]; then
          MAKE_CMD="$MAKE_CMD FILTER=\"${{ github.event.inputs.filter }}\""
        fi

        echo "🚀 Executing: $MAKE_CMD"
        eval $MAKE_CMD

    - name: Debug test output files
      if: always()
      run: |
        echo "📁 Files in test/ directory:"
        find test/ -type f || echo "No test directory found"
        echo "📁 Files in test/reports/ directory structure:"
        find test/reports/ -type f || echo "No test/reports directory found"
        echo "📁 Current directory contents:"
        ls -la

    - name: Upload test reports and logs
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('test/reports/**') != ''
      with:
        name: test-reports-py${{ matrix.python-version }}
        path: |
          test/reports/
        retention-days: 30

  # Job to combine and publish results from all matrix runs
  publish-results:
    needs: test-examples
    runs-on: ubuntu-latest
    # Only run for manual workflow dispatches, not for PR dry-runs
    if: always() && github.event_name == 'workflow_dispatch' && needs.test-examples.result != 'cancelled'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all test artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Debug artifacts
      run: |
        echo "📁 Downloaded artifacts structure:"
        find artifacts/ -type f || echo "No artifacts directory found"
        ls -la artifacts/ || echo "Cannot list artifacts directory"

    - name: Combine test results
      run: |
        mkdir -p combined-results/reports
        echo "📊 Combining test results from all Python versions..."

        # Copy entire reports directory structure from test-reports artifacts
        find artifacts/ -path "*/test-reports-*" -type d -name "reports" -exec cp -r {}/* combined-results/reports/ \; || echo "No reports found"

        echo "📁 Combined results structure:"
        find combined-results/ -type f | head -20

    - name: Upload combined results
      uses: actions/upload-artifact@v4
      with:
        name: combined-test-results
        path: combined-results/
        retention-days: 90

  # Job to deploy results to GitHub Pages
  deploy-pages:
    needs: publish-results
    runs-on: ubuntu-latest
    # Deploy for manual workflow dispatches that completed (success or failure)
    if: always() && github.event_name == 'workflow_dispatch' && needs.publish-results.result != 'cancelled'

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Download combined results
      uses: actions/download-artifact@v4
      with:
        name: combined-test-results
        path: pages-content/

    - name: Create GitHub Pages content
      run: |
        cd pages-content

        # Copy all files from reports directory to root, preserving structure
        if [ -d "reports" ]; then
          cp -r reports/* .
          rm -rf reports
          echo "✅ Copied reports content to root"
        fi

        # Rename test_report.html to index.html if it exists
        if [ -f "test_report.html" ]; then
          mv test_report.html index.html
          echo "✅ Renamed test_report.html to index.html"
        fi

        # Create a simple info file instead of complex HTML injection
        if [ -f "index.html" ]; then
          echo "<!DOCTYPE html>" > info.html
          echo "<html><head><meta charset='utf-8'><title>Test Report Links</title></head><body>" >> info.html
          echo "<h2>Quick Links</h2>" >> info.html
          echo "<p><a href='index.html'>📊 Main Test Report</a></p>" >> info.html
          echo "<p><a href='test_report.json'>📄 JSON Data</a></p>" >> info.html
          echo "<p><a href='${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}'>🔗 GitHub Actions Run</a></p>" >> info.html
          echo "</body></html>" >> info.html
          echo "✅ Created navigation info page"
        fi

        echo "📁 Final GitHub Pages structure:"
        find . -type f | head -20

    - name: Setup Pages
      uses: actions/configure-pages@v4
      with:
        enablement: true

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: pages-content/

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Comment deployment URL
      run: |
        echo "🚀 Test results deployed to GitHub Pages!"
        echo "📊 View results at: ${{ steps.deployment.outputs.page_url }}"