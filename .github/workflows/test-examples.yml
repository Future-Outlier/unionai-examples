name: Test Examples

on:
  # Uncomment to enable automatic testing on push to main
  # push:
  #   branches: [ main ]
  # Uncomment to enable automatic testing on pull requests
  # pull_request:
  #  branches: [ main ]
  # Uncomment to enable daily scheduled testing
  # schedule:
  #   # Run daily at 2 AM UTC
  #   - cron: '0 2 * * *'
  workflow_dispatch:
    inputs:
      test_mode:
        description: 'Test mode to run'
        required: true
        default: 'test'
        type: choice
        options:
          - test-preview
          - test-local
          - test
      filter:
        description: 'Filter pattern for examples to test (optional, mutually exclusive with file)'
        required: false
        type: string
      file:
        description: 'File path for example to test (optional, mutually exclusive with filter)'
        required: false
        type: string
      python_version:
        description: 'Python version to use'
        required: false
        default: '3.13'
        type: choice
        options:
          - '3.12'
          - '3.13'

jobs:
  test-examples:
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.13']

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install uv
      uses: astral-sh/setup-uv@v3
      with:
        version: "latest"

    - name: Set up Python ${{ matrix.python-version }}
      run: uv python install ${{ matrix.python-version }}

    - name: Create virtual environment and update Flyte
      run: |
        uv venv --python ${{ matrix.python-version }} .venv
        source .venv/bin/activate
        echo "Virtual environment created with Python ${{ matrix.python-version }}"

    - name: Update to latest Flyte version
      run: |
        source .venv/bin/activate
        make update-flyte

    - name: Clean previous test artifacts
      run: |
        source .venv/bin/activate
        make clean

    - name: Run tests
      env:
        GITHUB_ACTIONS: true
        # Flyte client secret for authentication (referenced in config template)
        FLYTE_CLIENT_SECRET: ${{ secrets.FLYTE_CLIENT_SECRET }}
      run: |
        source .venv/bin/activate
        # Build the make command with optional parameters
        MAKE_CMD="make ${{ github.event.inputs.test_mode || 'test-preview' }}"

        # Add FILE parameter if specified (takes precedence over FILTER)
        if [ -n "${{ github.event.inputs.file }}" ]; then
          MAKE_CMD="$MAKE_CMD FILE=\"${{ github.event.inputs.file }}\""
        elif [ -n "${{ github.event.inputs.filter }}" ]; then
          MAKE_CMD="$MAKE_CMD FILTER=\"${{ github.event.inputs.filter }}\""
        fi

        echo "🚀 Executing: $MAKE_CMD"
        eval $MAKE_CMD

    - name: Debug test output files
      if: always()
      run: |
        echo "📁 Files in test/ directory:"
        find test/ -type f || echo "No test directory found"
        echo "📁 Files in test/reports/ directory structure:"
        find test/reports/ -type f || echo "No test/reports directory found"
        echo "📁 Current directory contents:"
        ls -la

    - name: Upload test reports and logs
      uses: actions/upload-artifact@v4
      if: always() && hashFiles('test/reports/**') != ''
      with:
        name: test-reports-py${{ matrix.python-version }}
        path: |
          test/reports/
        retention-days: 30

  # Job to combine and publish results from all matrix runs
  publish-results:
    needs: test-examples
    runs-on: ubuntu-latest
    # Only run for manual workflow dispatches, not for PR dry-runs
    if: always() && github.event_name == 'workflow_dispatch' && needs.test-examples.result != 'cancelled'

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Download all test artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts/

    - name: Debug artifacts
      run: |
        echo "📁 Downloaded artifacts structure:"
        find artifacts/ -type f || echo "No artifacts directory found"
        ls -la artifacts/ || echo "Cannot list artifacts directory"

    - name: Combine test results
      run: |
        mkdir -p combined-results/reports
        echo "📊 Combining test results from all Python versions..."

        # Copy entire reports directory structure from test-reports artifacts
        find artifacts/ -path "*/test-reports-*" -type d -name "reports" -exec cp -r {}/* combined-results/reports/ \; || echo "No reports found"

        echo "📁 Combined results structure:"
        find combined-results/ -type f | head -20

    - name: Create test summary
      run: |
        echo "# 🧪 Test Summary" > combined-results/SUMMARY.md
        echo "" >> combined-results/SUMMARY.md
        echo "## Test Results by Python Version" >> combined-results/SUMMARY.md
        echo "" >> combined-results/SUMMARY.md

        # Analyze JSON reports from the reports directory
        for report in combined-results/reports/test_report.json; do
          if [ -f "$report" ]; then
            echo "- **Report**: $(basename $report)" >> combined-results/SUMMARY.md
            if command -v jq >/dev/null 2>&1; then
              passed_count=$(jq -r '[.[] | select(.status=="passed")] | length' "$report" 2>/dev/null || echo "0")
              failed_count=$(jq -r '[.[] | select(.status=="failed")] | length' "$report" 2>/dev/null || echo "0")
              timeout_count=$(jq -r '[.[] | select(.status=="timeout")] | length' "$report" 2>/dev/null || echo "0")
              total_count=$(jq -r 'length' "$report" 2>/dev/null || echo "0")
              echo "  - **Status**: $passed_count passed, $failed_count failed, $timeout_count timeout" >> combined-results/SUMMARY.md
              echo "  - **Total**: $total_count tests" >> combined-results/SUMMARY.md
            else
              echo "  - **Status**: JSON analysis requires jq (not available)" >> combined-results/SUMMARY.md
            fi
            echo "" >> combined-results/SUMMARY.md
          fi
        done

        # Count log files and reports
        log_count=$(find combined-results/reports/logs/ -name "*.log" 2>/dev/null | wc -l)
        report_count=$(find combined-results/reports/ -name "*.json" -o -name "*.html" | wc -l)

        echo "## 📋 Artifacts Generated" >> combined-results/SUMMARY.md
        echo "" >> combined-results/SUMMARY.md
        echo "- **Log files**: $log_count individual test logs" >> combined-results/SUMMARY.md
        echo "- **Report files**: $report_count JSON/HTML reports" >> combined-results/SUMMARY.md
        echo "- **Structure**:" >> combined-results/SUMMARY.md
        echo "  - \`index.html\` - Main test report (interactive)" >> combined-results/SUMMARY.md
        echo "  - \`test_report.json\` - Machine-readable test data" >> combined-results/SUMMARY.md
        echo "  - \`logs/\` - Individual test execution logs" >> combined-results/SUMMARY.md

    - name: Upload combined results
      uses: actions/upload-artifact@v4
      with:
        name: combined-test-results
        path: combined-results/
        retention-days: 90

  # Job to deploy results to GitHub Pages
  deploy-pages:
    needs: publish-results
    runs-on: ubuntu-latest
    # Deploy for manual workflow dispatches that completed (success or failure)
    if: always() && github.event_name == 'workflow_dispatch' && needs.publish-results.result != 'cancelled'

    # Grant GITHUB_TOKEN the permissions required to make a Pages deployment
    permissions:
      pages: write      # to deploy to Pages
      id-token: write   # to verify the deployment originates from an appropriate source

    # Deploy to the github-pages environment
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}

    steps:
    - name: Download combined results
      uses: actions/download-artifact@v4
      with:
        name: combined-test-results
        path: pages-content/

    - name: Create GitHub Pages content
      run: |
        cd pages-content

        # Copy all files from reports directory to root, preserving structure
        if [ -d "reports" ]; then
          cp -r reports/* .
          rm -rf reports  # Remove the now-empty reports directory
        fi

        # Rename test_report.html to index.html if it exists
        if [ -f "test_report.html" ]; then
          mv test_report.html index.html
          echo "✅ Renamed test_report.html to index.html"
        fi

        # Add navigation links to the top of index.html if it exists
        if [ -f "index.html" ]; then
          # Create a temporary file with the navigation header
          cat > nav_header.html << 'EOF'
<!DOCTYPE html>
<html>
<head>
    <title>Flyte Examples Test Report</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 20px;
            background-color: #f8f9fa;
        }
        .nav-bar {
            background: linear-gradient(135deg, #28a745 0%, #20c997 100%);
            color: white;
            padding: 15px 20px;
            border-radius: 8px;
            margin-bottom: 20px;
            display: flex;
            justify-content: space-between;
            align-items: center;
            flex-wrap: wrap;
            gap: 10px;
        }
        .nav-links {
            display: flex;
            gap: 15px;
            align-items: center;
            flex-wrap: wrap;
        }
        .nav-link {
            color: white;
            text-decoration: none;
            padding: 8px 16px;
            background: rgba(255,255,255,0.2);
            border-radius: 4px;
            font-weight: 500;
            transition: all 0.2s ease;
        }
        .nav-link:hover {
            background: rgba(255,255,255,0.3);
            color: white;
            text-decoration: none;
            transform: translateY(-1px);
        }
        .workflow-info {
            font-size: 0.9em;
            opacity: 0.9;
        }
EOF

          # Extract the existing head content and modify title
          sed -n '1,/<\/head>/p' index.html > temp_head.html

          # Extract the body content (everything after <body>)
          sed -n '/<body>/,$p' index.html > temp_body.html

          # Create the new index.html with navigation
          cat > index.html << EOF
$(cat temp_head.html | sed 's/<\/head>//')
    </style>
</head>
<body>
    <div class="nav-bar">
        <div class="nav-links">
            <a href="test_report.json" class="nav-link">📄 JSON Data</a>
            <a href="SUMMARY.md" class="nav-link">📊 Summary</a>
            <a href="${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID}" class="nav-link" target="_blank">🔗 View on GitHub Actions</a>
        </div>
        <div class="workflow-info">
            Generated: $(date -u '+%Y-%m-%d %H:%M:%S UTC') | Run #${GITHUB_RUN_NUMBER}
        </div>
    </div>
$(sed '1,/<body>/d' temp_body.html)
EOF

          # Clean up temporary files
          rm -f nav_header.html temp_head.html temp_body.html

          echo "✅ Added navigation bar to index.html"
        fi

        echo "� Final GitHub Pages structure:"
        find . -type f | head -20

    - name: Setup Pages
      uses: actions/configure-pages@v4
      with:
        enablement: true

    - name: Upload to GitHub Pages
      uses: actions/upload-pages-artifact@v3
      with:
        path: pages-content/

    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4

    - name: Comment deployment URL
      run: |
        echo "🚀 Test results deployed to GitHub Pages!"
        echo "📊 View results at: ${{ steps.deployment.outputs.page_url }}"